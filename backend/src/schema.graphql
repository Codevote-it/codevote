scalar Date

type Query {
    codevote(id: ID!): Codevote
    allCodevotes: [Codevote!]!
    """ Login via /auth/github/login and use the retrieved token as Bearer token"""
    me: User
}

type Mutation {
    createCodevote(input: CodevoteInput): Codevote!
    editCodevote(input: CodevoteInput): Codevote!
    vote(input:  VoteInput!): Codevote!
}

input CodevoteInput {
    snippet1: SnippetInput!
    snippet2: SnippetInput!
}

input SnippetInput {
    title: String!
    content: String!
}

input VoteInput {
    codevoteId: ID!
    snippetId: ID!
}

type Codevote {
    id: ID!
    createdAt: Date!
    snippet1: Snippet!
    snippet2: Snippet!
    creator: User
}

type Snippet {
    id: ID!
    title: String!
    content: String!
    votes: [Vote!]!
    voteCount: Int!
}
type Vote {
    id: ID!
    createdAt: Date!
    user: User
}

type User {
    id: ID!
    displayName: String!
    username: String!
    profileImageUrl: String
}